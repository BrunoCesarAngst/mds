@startuml class

package Client {
  interface StormGlassPointSource{

  }

  interface StormGlassPoint{
    +time : string
    +waveHeight : StormGlassPointSource
    +waveDirection : StormGlassPointSource
    +swellDirection : StormGlassPointSource
    +swellHeight : StormGlassPointSource
    +swellPeriod : StormGlassPointSource
    +windDirection : StormGlassPointSource
    +windSpeed : StormGlassPointSource
  }

  interface StormGlassForecastResponse{
    +hours : StormGlassPoint[]
  }

  interface ForecastPoint{
    +time : string
    +waveHeight : number
    +waveDirection : number
    +swellDirection : number
    +swellHeight : number
    +swellPeriod : number
    +windDirection : number
    +windSpeed : number
  }

  class StormGlassUnexpectedResponseError{

  }

  class InternalError{

  }

  class ClientRequestError{

  }

  class StormGlassResponseError{

  }

  class StormGlass{
    +stormGlassAPIParams : any
    +stormGlassAPISource : any
    +fetchPoints(lat: number, lng: number): Promise<ForecastPoint[]>
    #getForecastPointsFromApi(lat: number, lng: number): Promise<ForecastPoint[]>
    #getForecastPointsFromCache(key: string): ForecastPoint[] | undefined
    -getCacheKey(lat: number, lng: number): string
    -setForecastPointsInCache(key: string, forecastPoints: ForecastPoint[]): boolean
    -normalizeResponse(points: StormGlassForecastResponse): ForecastPoint[]
    -isValidPoint(point: Partial<StormGlassPoint>): boolean
  }

  StormGlassPoint --> StormGlassPointSource
  InternalError <|-- StormGlassUnexpectedResponseError
  InternalError <|-- ClientRequestError
  InternalError <|-- StormGlassResponseError
}

package Controllers {
  class BeachesController{
    +create(req: Request, res: Response): Promise<void>
  }

  class BaseController{

  }

  BaseController <|-- BeachesController

  class ForecastController{
    +getForecastForgeLoggedUser(req: Request, res: Response): Promise<void>
  }

  class BaseController{

  }

  BaseController <|-- ForecastController

  class BaseController{
    #sendCreateUpdateErrorResponse(res: Response, error: mongoose.Error.ValidationError | Error): void
    -handleClientErrors(error: mongoose.Error.ValidationError): TypeLiteral
    #sendErrorResponse(res: Response, apiError: APIError): Response
  }

  class UsersController{
    +create(req: Request, res: Response): Promise<void>
    +authenticate(req: Request, res: Response): Promise<Response>
    +me(req: Request, res: Response): Promise<Response>
  }

  class BaseController{

  }

  BaseController <|-- UsersController

}

package Middlewares {
  interface HTTPError{
    +status : number
  }

  class Error{

  }

  Error <|-- HTTPError
}

package Models {
  interface Beach{
    +_id : string
    +name : string
    +position : GeoPosition
    +lat : number
    +lng : number
    +userId : string
  }

  interface BeachModel{

  }

  class Omit{

  }

  class Document{

  }

  Beach --> GeoPosition
  Omit <|-- BeachModel
  Document <|-- BeachModel

  interface User{
    +_id : string
    +name : string
    +email : string
    +password : string
  }

  interface UserModel{

  }

  class Omit{

  }

  class Document{

  }

  Omit <|-- UserModel
  Document <|-- UserModel
}

package Services {
  interface DecodedUser{
    +id : string
  }

  class Omit{

  }

  class AuthService{
    +hashPassword(password: string, salt: any = 10): Promise<string>
    +comparePasswords(password: string, hashedPassword: string): Promise<boolean>
    +generateToken(payload: any): string
    +decodeToken(token: string): DecodedUser
  }

  Omit <|-- DecodedUser
    
  interface BeachForecast{
    +rating : number
  }

  class Omit{

  }

  class ForecastPoint{

  }

  interface TimeForecast{
    +time : string
    +forecast : BeachForecast[]
  }

  class ForecastProcessingInternalError{

  }

  class InternalError{

  }

  class Forecast{
    +processForecastForBeaches(beaches: Beach[], orderBy: 'asc' | 'desc' = 'desc', orderField: any = 'rating'): Promise<TimeForecast[]>
    -calculateRating(beaches: Beach[]): Promise<BeachForecast[]>
    -mapForecastByTime(forecast: BeachForecast[]): TimeForecast[]
    -enrichBeachData(points: ForecastPoint[], beach: Beach, rating: Rating): BeachForecast[]
  }

  Omit <|-- BeachForecast
  ForecastPoint <|-- BeachForecast
  InternalError <|-- ForecastProcessingInternalError

  class Rating{
  +getRateForPoint(point: ForecastPoint): number
  +getRatingBasedOnWindAndWavePositions(waveDirection: GeoPosition, windDirection: GeoPosition): number
  -isWindOffShore(waveDirection: string, windDirection: string): boolean
  +getRatingForSwellPeriod(period: number): number
  +getRatingForSwellSize(height: number): number
  +getPositionFromLocation(coordinates: number): GeoPosition
}


}


@enduml